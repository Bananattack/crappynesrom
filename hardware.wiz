package nes do
    package ppu do
        package oam do
            let address = 0x2003
            let data = 0x2004
            let dma = 0x4014

            let ATTRIBUTE_PAL_0 = 0x0
            let ATTRIBUTE_PAL_1 = 0x1
            let ATTRIBUTE_PAL_2 = 0x2
            let ATTRIBUTE_PAL_3 = 0x3
            // 0x04, 0x8, 0x10 are unused
            let ATTRIBUTE_BEHIND = 0x20
            let ATTRIBUTE_HFLIP = 0x40
            let ATTRIBUTE_VFLIP = 0x80
        end

        let ctrl = 0x2000
        let mask = 0x2001
        let status = 0x2002
        // oam stuff in separate package.
        let scroll = 0x2005
        let address = 0x2006
        let data = 0x2007
        
        let CTRL_NAMETABLE_0 = 0x00
        let CTRL_NAMETABLE_1 = 0x01
        let CTRL_NAMETABLE_2 = 0x02
        let CTRL_NAMETABLE_3 = 0x03
        let CTRL_VRAM_STEP_X = 0x00
        let CTRL_VRAM_STEP_Y = 0x04
        let CTRL_SPRITE_PATTERN_0 = 0x00
        let CTRL_SPRITE_PATTERN_1 = 0x08
        let CTRL_BG_PATTERN_0 = 0x00
        let CTRL_BG_PATTERN_1 = 0x10
        let CTRL_SPRITE_8x8 = 0x00
        let CTRL_SPRITE_8x16 = 0x20
        // ppu ctrl flag 0x40 is unused
        let CTRL_DISABLE = 0x00
        let CTRL_NMI = 0x80

        let MASK_GREYSCALE = 0x01
        let MASK_LEFTMOST_BG = 0x02
        let MASK_LEFTMOST_SPRITES = 0x04
        let MASK_RENDER_BG = 0x08
        let MASK_RENDER_SPRITES = 0x10
        let MASK_INTENSIFY_R = 0x20
        let MASK_INTENSIFY_G = 0x40
        let MASK_INTENSIFY_B = 0x80
        
        // ppu status flags 0x00..0x10 are unused
        let STATUS_SPRITE_OVERFLOW = 0x20
        let STATUS_SPRITE_ZERO_HIT = 0x40
        let STATUS_VBLANK = 0x80

        // Base nametable address
        let NAMETABLE_BASE = 0x2000
        // Offset to the attribute section of a nametable
        let NAMETABLE_ATTRIBUTE = 0x3C0
        // Size of each nametable in bytes.
        let NAMETABLE_SIZE = 0x400
        // Total number of nametables.
        let NAMETABLE_TOTAL = 4
        
        // Base palette address.
        let PALETTE_BASE = 0x3F00
        // Size of each palette in bytes.
        let PALETTE_SIZE = 0x04
        // Total number of palettes.
        let PALETTE_TOTAL = 8
    end

    package apu do
        package square1 do
            let ctrl = 0x4000
            let sweep = 0x4001
            let low = 0x4002
            let high = 0x4003
        end
        
        package square2 do
            let ctrl = 0x4004
            let sweep = 0x4005
            let low = 0x4006
            let high = 0x4007
        end
        
        package triangle do
            let ctrl = 0x4008
            // triangle register 0x4009 is unused
            let low = 0x400A
            let high = 0x400B
        end
        
        package noise do
            let ctrl = 0x400C
            // noise register 0x400D is unused
            let random = 0x400E
            let length = 0x400F
        end
        
        let flag = 0x4015
        let sequencer = 0x4017
        
        let FLAG_SQUARE1 = 0x01
        let FLAG_SQUARE2 = 0x02
        let FLAG_TRIANGLE = 0x04
        let FLAG_NOISE = 0x08
        let FLAG_DMC_RESTART = 0x10
        // apu flag 0x20 is unused.
        let FLAG_FRAME_IRQ = 0x40
        let FLAG_DMC_IRQ = 0x80
        
        let SEQUENCER_FOUR_STEP = 0x00
        let SEQUENCER_FIVE_STEP = 0x40
        let SEQUENCER_DISABLE_IRQ = 0x80
    end

    package joy do
        let out = 0x4016
        let in1 = 0x4016
        let in2 = 0x4017
        
        let A = 0x01
        let B = 0x02
        let SELECT = 0x04
        let START = 0x08
        let UP = 0x10
        let DOWN = 0x20
        let LEFT = 0x40
        let RIGHT = 0x80
    end

    package mmc3 do
        package irq do
            // This register specifies the IRQ counter reload value.
            // When the IRQ counter is zero (or a reload is requested through 0xC001),
            // this value will be copied into the MMC3 IRQ counter at
            // the end of the current scanline
            let latch = 0xC000
            
            // Writing any value to this register clears the MMC3 IRQ counter
            // so that it will be reloaded at the end of the current scanline.
            let reload = 0xC001
            
            // Writing any value to this register will disable MMC3 interrupts
            // AND acknowledge any pending interrupts.
            let disable = 0xE000
            
            // Writing any value to this register will enable MMC3 interrupts.
            let enable = 0xE001
        end
        
        let select = 0x8000
        let data = 0x8001
        let mirror = 0xA000
        let wram = 0xA001
        
        let SELECT_2K_CHR_00 = 0x00
        let SELECT_2K_CHR_08 = 0x01
        let SELECT_1K_CHR_10 = 0x02
        let SELECT_1K_CHR_14 = 0x03
        let SELECT_1K_CHR_18 = 0x04
        let SELECT_1K_CHR_1C = 0x05
        let SELECT_8K_PRG_80 = 0x06
        let SELECT_8K_PRG_A0 = 0x07
        let SELECT_PRG_SWAP = 0x40
        let SELECT_CHR_SWAP = 0x80
            
        let MIRROR_VERTICAL = 0x00
        let MIRROR_HORIZONTAL = 0x1
        
        let RAM_READONLY = 0x40
        let WRAM_ENABLE = 0x80
    end
end